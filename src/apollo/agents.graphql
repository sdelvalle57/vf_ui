# Agents
query AllAgents {
  allAgents {
    id
    name
    note
    createdAt
  }
}

mutation CreateAgent($name: String!, $note: String) {
  createAgent(name: $name, note: $note) {
    id
    name
    note
    createdAt
  }
}


# Resource Specifications
query ResourceSpecificationsByAgent($agentId: Uuid!) {
  resourceSpecificationsByAgent(agentId: $agentId) {
    id
    agentId
    name
    note
    createdAt
    resourceType
    unitOfMeasure
  }
}

query ResourceSpecificationById($resourceSpecificationId: Uuid!) {
  resourceSpecificationById(resourceSpecificationId: $resourceSpecificationId) {
    id
    agentId
    name
    note
    createdAt
    resourceType
    unitOfMeasure
  }
}

mutation CreateResourceSpecification(
  $agentId: Uuid!, 
  $name: String!, 
  $note: String, 
  $resourceType: ResourceType!, 
  $unitOfMeasure: String!
) {
  createResourceSpecification(
    agentId: $agentId, 
    name: $name, 
    note: $note, 
    resourceType: $resourceType, 
    unitOfMeasure: $unitOfMeasure
  ) {
    id
    agentId
    name
    createdAt
    resourceType
    unitOfMeasure
  }
}

# Economic Resources
query EconomicResourcesBySpecificationId($resourceSpecificationId: Uuid!) {
  economicResourcesBySpecificationId(resourceSpecificationId: $resourceSpecificationId) {
    id
    name
    resourceSpecificationId
    note
    accountingQuantity
    onHandQuantity
    trackingIdentifier
    currentLocation
    lot
    containedIn
    createdAt
    referenceNumber
  }
}

mutation CreateEconomicResource(
  $resourceSpecificationId: Uuid!,
  $name: String!,
  $note: String,
  $accountingQuantity: Int!,
  $trackingIdentifier: String,
  $currentLocation: String!,
  $lot: String,
  $containedIn: Uuid
) {
  createEconomicResource(
    resourceSpecificationId: $resourceSpecificationId,
    name: $name,
    note: $note,
    accountingQuantity: $accountingQuantity,
    trackingIdentifier: $trackingIdentifier,
    currentLocation: $currentLocation,
    lot: $lot,
    containedIn: $containedIn
  ) {
    id
    resourceSpecificationId
    name
    note
    accountingQuantity
    onHandQuantity
    trackingIdentifier
    currentLocation
    lot
    containedIn
    createdAt
    referenceNumber
  }
}


# Recipes
query RecipesByAgent($agentId: Uuid!) {
  recipesByAgent(agentId: $agentId) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}

query RecipeById($recipeId: Uuid!) {
  recipeById(recipeId: $recipeId) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}

mutation CreateRecipe(
  $agentId: Uuid!,
  $name: String!,
  $note: String,
  $recipeResources: [Uuid!]!
) {
  createRecipe(
    agentId: $agentId,
    name: $name,
    note: $note,
    recipeResources: $recipeResources
  ) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}



# Recipe Templates
input RecipeFlowTemplateDataFieldArgInput {
  field_value: FieldValue!
  field: String!
  field_type: FieldType!
  note: String
  required: Boolean!
  query: String
  default_value: String
}

input RecipeFlowTemplateArgInput {
  event_type: EventType!
  role_type: RoleType!
  action: ActionType!
  data_fields: [RecipeFlowTemplateDataFieldArgInput!]!
}


type RecipeTemplateWithRecipeFlows {
  id: ID!
  name: String!
  recipeTemplateType: RecipeTemplateType!
  recipeFlows: [RecipeFlowTemplateWithDataFields!]!
}

type RecipeFlowTemplateWithDataFields {
  id: ID!
  recipeTemplateId: ID!
  eventType: EventType!
  roleType: RoleType!
  action: ActionType!
  dataFields: [RecipeFlowTemplateDataField!]!
}

type RecipeFlowTemplateDataField {
  fieldValue: FieldValue!
  field: String!
  fieldType: FieldType!
  note: String
  required: Boolean!
  query: String
}

mutation CreateRecipeTemplate(
  $name: String!,
  $recipeTemplateType: RecipeTemplateType!,
  $recipeFlowTemplateArgs: [RecipeFlowTemplateArg!]!
) {
  createRecipeTemplate(
    name: $name,
    recipeTemplateType: $recipeTemplateType,
    recipeFlowTemplateArgs: $recipeFlowTemplateArgs
  ) {
  id
    name
    recipeTemplateType
    recipeFlows {
      id
      recipeTemplateId
      eventType 
      roleType
      action
      dataFields {
        fieldValue
        field
        fieldType
        note
        required
      }
    }
  }
}

query GetTemplates {
  getTemplates {
    id
    name
    recipeTemplateType
    recipeFlows {
      id
      recipeTemplateId
      eventType
      roleType
      action
      dataFields {
        fieldValue
        field
        fieldType
        note
        required
      }
    }
  }
}

query GetTemplateById($templateId: Uuid!) {
  getTemplateById(templateId: $templateId) {
    id
    name
    recipeTemplateType
    recipeFlows {
      id
      recipeTemplateId
      eventType
      roleType
      action
      dataFields {
        fieldValue
        field
        fieldType
        note
        required
      }
    }
  }
}


# Recipe Template Access
query GetTemplatesAccessByAgent($agentId: Uuid!) {
  getTemplatesAccessByAgent(agentId: $agentId) {
    id
    name
    recipeTemplateType
    recipeFlows {
      id
      recipeTemplateId
      eventType
      roleType
      action
      dataFields {
        fieldValue
        field
        fieldType
        note
        required
      }
    }
  }
}

mutation AssignTemplateToAgent($agentId: Uuid!, $recipeTemplateId: Uuid!) {
  assignTemplateToAgent(agentId: $agentId, recipeTemplateId: $recipeTemplateId) {
    id
    agentId
    recipeTemplateId
  }
}