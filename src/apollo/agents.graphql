# Agents
query AllAgents {
  allAgents {
    id
    name
    note
    createdAt
  }
}

query GetAgentsWithLocation {
  agentsWithLocation {
    id
    name
    locations {
      id
      name
      value
    }
  }
}

mutation CreateAgent($name: String!, $note: String) {
  createAgent(name: $name, note: $note) {
    id
    name
    note
    createdAt
  }
}


# Resource Specifications
query ResourceSpecificationsByAgent($agentId: Uuid!) {
  resourceSpecificationsByAgent(agentId: $agentId) {
    id
    agentId
    name
    note
    createdAt
    resourceType
    unitOfMeasure
  }
}

query ResourceSpecificationById($resourceSpecificationId: Uuid!) {
  resourceSpecificationById(resourceSpecificationId: $resourceSpecificationId) {
    id
    agentId
    name
    note
    createdAt
    resourceType
    unitOfMeasure
  }
}

mutation CreateResourceSpecification(
  $agentId: Uuid!, 
  $name: String!, 
  $note: String, 
  $resourceType: ResourceType!, 
  $unitOfMeasure: String!
) {
  createResourceSpecification(
    agentId: $agentId, 
    name: $name, 
    note: $note, 
    resourceType: $resourceType, 
    unitOfMeasure: $unitOfMeasure
  ) {
    id
    agentId
    name
    createdAt
    resourceType
    unitOfMeasure
  }
}

# Economic Resources
query EconomicResourcesBySpecificationId($resourceSpecificationId: Uuid!) {
  economicResourcesBySpecificationId(resourceSpecificationId: $resourceSpecificationId) {
    id
    name
    resourceSpecificationId
    note
    accountingQuantity
    onHandQuantity
    trackingIdentifier
    currentLocation
    lot
    containedIn
    createdAt
    referenceNumber
  }
}

query EconomicResourcesByAgentId($agentId: Uuid!) {
  economicResourcesByAgentId(agentId: $agentId) {
    id
    resourceSpecification {
      id
      agentId
      name
      note
      createdAt
    }
    name
    note
    accountingQuantity
    onHandQuantity
    trackingIdentifier
    currentLocation
    lot
    containedIn
    createdAt
    referenceNumber
  }
}

mutation CreateEconomicResource(
  $resourceSpecificationId: Uuid!,
  $name: String!,
  $note: String,
  $accountingQuantity: Int!,
  $trackingIdentifier: String,
  $currentLocation: String!,
  $lot: String,
  $containedIn: Uuid
) {
  createEconomicResource(
    resourceSpecificationId: $resourceSpecificationId,
    name: $name,
    note: $note,
    accountingQuantity: $accountingQuantity,
    trackingIdentifier: $trackingIdentifier,
    currentLocation: $currentLocation,
    lot: $lot,
    containedIn: $containedIn
  ) {
    id
    resourceSpecificationId
    name
    note
    accountingQuantity
    onHandQuantity
    trackingIdentifier
    currentLocation
    lot
    containedIn
    createdAt
    referenceNumber
  }
}


# Recipes
query RecipesByAgent($agentId: Uuid!) {
  recipesByAgent(agentId: $agentId) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}

query RecipeById($recipeId: Uuid!) {
  recipeById(recipeId: $recipeId) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}

mutation CreateRecipe(
  $agentId: Uuid!,
  $name: String!,
  $note: String,
  $recipeResources: [Uuid!]!
) {
  createRecipe(
    agentId: $agentId,
    name: $name,
    note: $note,
    recipeResources: $recipeResources
  ) {
    recipe {
      id
      agentId
      name
      note
      createdAt
    }
    resourceSpecifications {
      id
      agentId
      name
      note
      createdAt
      resourceType
      unitOfMeasure
    }
  }
}

fragment RecipeFlowTemplateWithDataFieldsFragment on RecipeFlowTemplateWithDataFields {
  id
  recipeTemplateId
  eventType
  roleType
  action
  identifier
  groups {
    id
    name
    groupClass
  }
  dataFields {
    id
    recipeFlowTemplateId
    groupId
    fieldIdentifier
    fieldClass
    field
    fieldType
    note
    required
    flowThrough
    inherits
    acceptDefault
  }
}

fragment RecipeTemplateWithRecipeFlowsFragment on RecipeTemplateWithRecipeFlows {
  id
  mapTemplateId
  name
  identifier
  commitment
  fulfills
  trigger
  recipeFlows {
    ...RecipeFlowTemplateWithDataFieldsFragment
  }
}

mutation CreateMapTemplate(
  $name: String!,
  $type: TemplateType!
) {
  createMapTemplate(
    name: $name,
    type: $type
  ) {
    id
    name
    type
  }
}

query GetMapTemplates {
  getMapTemplates {
    map {
      id
      name
      type
    }
    templates {
      ...RecipeTemplateWithRecipeFlowsFragment
    }
  }
}

query GetMapTemplateById($mapId: Uuid!) {
  getMapTemplateById(mapId: $mapId) {
    map {
      id
      name
      type
    }
    templates {
      ...RecipeTemplateWithRecipeFlowsFragment
    }
  }
}

query getTemplatesByMapId($mapId: Uuid!) {
  getTemplatesByMapId(mapId: $mapId) {
    ...RecipeTemplateWithRecipeFlowsFragment
  }
}

mutation CreateRecipeTemplate(
  $mapTemplateId: Uuid!,
  $identifier: String!,
  $name: String!,
  $recipeFlowTemplateArgs: [RecipeFlowTemplateArg!]!,
  $commitment: ActionType,
  $fulfills: String,
  $trigger: ActionType
) {
  createRecipeTemplate(
    mapTemplateId: $mapTemplateId,
    identifier: $identifier,
    name: $name,
    recipeFlowTemplateArgs: $recipeFlowTemplateArgs,
    commitment: $commitment,
    fulfills: $fulfills,
    trigger: $trigger
  ) {
    ...RecipeTemplateWithRecipeFlowsFragment
  }
}

query GetTemplates {
  getTemplates {
    ...RecipeTemplateWithRecipeFlowsFragment
  }
}

query GetTemplateById($templateId: Uuid!) {
  getTemplateById(templateId: $templateId) {
    ...RecipeTemplateWithRecipeFlowsFragment
  }
}


# Recipe Template Access
query GetTemplatesAccessByAgent($agentId: Uuid!) {
  getTemplatesAccessByAgent(agentId: $agentId) {
   ...RecipeTemplateWithRecipeFlowsFragment
  }
}

mutation AssignTemplateToAgent($agentId: Uuid!, $recipeTemplateId: Uuid!) {
  assignTemplateToAgent(agentId: $agentId, recipeTemplateId: $recipeTemplateId) {
    id
    agentId
    recipeTemplateId
  }
}


# # Locations
query LocationsByAgent($agentId: Uuid!) {
  locationsByAgent(agentId: $agentId) {
    id
    agentId
    name
    value
  }
}

mutation CreateLocation($agentId: Uuid!, $name: String!, $value: String!) {
  createLocation(agentId: $agentId, name: $name, value: $value) {
    id
    agentId
    name
    value
  }
}
